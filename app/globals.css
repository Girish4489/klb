@import 'tailwindcss';
@config '../tailwind.config.ts';

@plugin "daisyui" {
  default: dark;
  themes: all;
}

/* globals.css */

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/

@layer base {

  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

:root {
  --z-base: 0;
  --z-base-content: 10;
  --z-sidebar: 30;
  --z-navbar: 40;
  --z-overlay: 45;
  --z-dropdown: 50;
  --z-modal: 60;
  --z-toast: 100;
  --z-max: 9999;
}

body {
  /* Remove all @font-face declarations since we're using next/font */
  font-family: var(--font-roboto-regular), system-ui, sans-serif;
}

/* HTML: <div class="grid-lines"></div> */
.grid-lines-dashed {
  --s: 80px;
  /* control the size of the grid */
  --n: 4;
  /* control the granularity */
  --t: 2px;
  /* the thickness */
  --g: 10px;
  /* the gap between dashes */

  --c: #556270 25%, #0000 0;
  background:
    conic-gradient(at var(--g) var(--t), var(--c)) calc((var(--s) / var(--n) - var(--g) + var(--t)) / 2) 0 / calc(var(--s) / var(--n)) var(--s),
    conic-gradient(from 180deg at var(--t) var(--g), var(--c)) 0 calc((var(--s) / var(--n) - var(--g) + var(--t)) / 2) / var(--s) calc(var(--s) / var(--n));
  /* you probably don't need to set any size in your case */
  width: calc(round(down, 100%, var(--s)) + var(--t));
  height: calc(4 * var(--s) + var(--t));
}

@supports not (opacity: round(1, 1)) {
  .grid-lines {
    width: 100%;
  }
}

/* HTML: <div class="grid-lines"></div> */
.grid-lines-solid {
  --s: 80px;
  /* control the size of the grid */
  --t: 2px;
  /* the thickness */

  background: conic-gradient(from 90deg at var(--t) var(--t), #0000 25%, #556270 0) 0 0 / var(--s) var(--s);
  /* you probably don't need to set any size in your case */
  width: calc(round(down, 100%, var(--s)) + var(--t));
  height: calc(4 * var(--s) + var(--t));
}

@supports not (opacity: round(1, 1)) {
  .grid-lines {
    width: 100%;
  }
}

/* HTML: <div class="rounded-dashes"></div> */
.rounded-dashes-horizontal {
  --s: 2px;
  /* control the size */
  --c: #774f38;
  /* the color */

  height: var(--s);
  width: 100%;
  --_g: var(--s) top 50%, var(--c) calc(100% - 1px), #0000;
  background: 0 / calc(4 * var(--s)) space no-repeat;
  background-image: radial-gradient(circle closest-side at left var(--_g)),
    radial-gradient(circle closest-side at right var(--_g)), linear-gradient(90deg, #0000 25%, var(--c) 0 75%, #0000 0);
}

/* HTML: <div class="rounded-dashes"></div> */
.rounded-dashes-vertical {
  --s: 15px;
  /* control the size */
  --c: #774f38;
  /* the color */

  width: var(--s);
  min-height: 300px;
  --_g: var(--s) left 50%, var(--c) calc(100% - 1px), #0000;
  background: 0/100% calc(4 * var(--s)) no-repeat space;
  background-image: radial-gradient(circle closest-side at top var(--_g)),
    radial-gradient(circle closest-side at bottom var(--_g)), linear-gradient(#0000 25%, var(--c) 0 75%, #0000 0);
}

/* HTML: <div class="zig-zag-line"></div> */
.zig-zag-line-vertical {
  --a: 90deg;
  /* control the angle */
  --s: 100px;
  /* size of the zig-zag */
  --b: 35px;
  /* control the thickness */

  background: #bf4d28;
  width: calc(var(--b) + var(--s) / (2 * tan(var(--a) / 2)));
  min-height: 250px;
  --_g: 100% var(--s) repeat-y conic-gradient(from calc(90deg - var(--a) / 2) at left, #0000, #000 1deg calc(var(--a) - 1deg), #0000 var(--a));
  mask:
    var(--b) 50% / var(--_g) exclude,
    0 50% / var(--_g);
}

.zig-zag-line-horizontal {
  --a: 118deg;
  /* control the angle */
  --s: 12px;
  /* size of the zig-zag */
  --b: 2px;
  /* control the thickness */

  height: calc(var(--b) + var(--s) / (2 * tan(var(--a) / 2)));
  width: 100%;
  --_g: var(--s) repeat-x conic-gradient(from calc(var(--a) / -2) at bottom, #0000, #000 1deg calc(var(--a) - 1deg), #0000 var(--a));
  mask:
    50% calc(-1 * var(--b)) / var(--_g) exclude,
    50% / var(--_g);
}

.bg-grid-pattern {
  background-image: linear-gradient(to right, rgba(255, 255, 255, 0.1) 1px, transparent 1px),
    linear-gradient(to bottom, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
  background-size: 24px 24px;
}

@keyframes float {
  0% {
    transform: translateY(0px);
  }

  50% {
    transform: translateY(-10px);
  }

  100% {
    transform: translateY(0px);
  }
}

@keyframes pulse-border {
  0% {
    box-shadow: 0 0 0 0 rgba(var(--primary-rgb), 0.4);
  }

  70% {
    box-shadow: 0 0 0 10px rgba(var(--primary-rgb), 0);
  }

  100% {
    box-shadow: 0 0 0 0 rgba(var(--primary-rgb), 0);
  }
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }

  100% {
    background-position: 200% 0;
  }
}

@keyframes bounce {

  0%,
  100% {
    transform: translateY(0);
  }

  50% {
    transform: translateY(-10px);
  }
}

@keyframes slideUp {
  0% {
    transform: translateY(100%);
    opacity: 0;
  }

  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-shimmer {
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
  background-size: 200% 100%;
  animation: shimmer 2s infinite;
}

.animate-pulse-border {
  animation: pulse-border 2s infinite;
}

.animate-bounce {
  animation: bounce 2s infinite;
}

.animate-slideUp {
  animation: slideUp 0.5s ease-out forwards;
}
